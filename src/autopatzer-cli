#!/usr/bin/perl

use strict;
use warnings;

use lib 'lib';

use Autopatzer;
use IO::Select;
use Try::Tiny;
use IPC::Run qw(start pump finish);

my @stockfish = ('./stockfish_10_x64');
my $in;
my $out;

my $h = start \@stockfish, \$in, \$out;

my $myturn = 1;
my $move;

my $ap = Autopatzer->new(
    device => '/dev/ttyACM0',
    cb => sub {
        my ($self) = @_;

        return if $myturn;

        $move = '';

        my $m = $self->moveShown;
        if ($m) {
            print "$m - hit enter to accept\n";
            $move = $m;
        }
    },
);

# TODO: detect end of game, illegal moves, etc.

while (1) {
    my $move = stockfish_move($ap->{game});
    print "Play $move for white...\n";
    $ap->moveWithMotors($move);
    $myturn = 0;
    print "Now move black on the board...\n";
    input_black();
}

sub input_black {
    my $s = IO::Select->new();
    $s->add(\*STDIN);
    $s->add($ap->{fh});

    my $done = 0;
    while (!$done) {
        my @ready = $s->can_read();

        for my $fh (@ready) {
            if ($fh == $ap->{fh}) {
                $ap->read();
            } else {
                my $line = <>;
                chomp $line;

                try {
                    if ($move) {
                        $ap->moveWithoutMotors($move);
                        $move = '';
                        $myturn = 1;
                        $done = 1;
                    }
                } catch {
                    warn $_;
                };
            }
        }
    }
}

# return the position evaluation, in pawns
sub stockfish_move {
    my ($game) = @_;

    my $fen = $game->get_fen;

    $in = "position fen $fen\ngo depth 5\n";
    pump $h while length $in;

    pump $h until $out =~ /bestmove (\w+)/;
    $out = '';

    return $1;
}
